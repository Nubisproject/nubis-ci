#!/bin/bash -l

set -e

declare region
declare environment
declare key_name
declare stack_name
declare owner
declare service_name

# Consume user-data
eval "$(nubis-metadata)"

if [ "$ami" = "" ]; then
  ami=$(grep "$region" artifacts/amis.txt | cut -d: -f2 | head -n1)
fi

echo "Deploying AMI $ami into $environment/$region"

CF_TEMPLATE=$WORKSPACE/artifacts/main.json
PLAYBOOK=$WORKSPACE/../ansible.yaml
VARIABLES=$WORKSPACE/../vars.yaml

FULL_STACK_NAME=$stack_name-$environment

export CONSUL_ENDPOINT
CONSUL_ENDPOINT="public.consul.$environment.$region.$NUBIS_ACCOUNT.$NUBIS_DOMAIN"

# Verify SSL cert later
export CONSUL_HTTP_SSL_VERIFY=0

if [ -d artifacts/terraform ]; then
  # Cleanup remote state (make sure doens't leak between environments
  terraform remote config -disable=true || true
  rm -f terraform.tfstate*

  # Setup remote state fresh
  terraform remote config \
    -backend=consul \
    -backend-config="path=deploy/$service_name/$environment/tf-state" \

  terraform get -update=true artifacts/terraform

  terraform apply \
    -var account="$NUBIS_ACCOUNT" \
    -var region="$region" \
    -var environment="$environment" \
    -var service_name="$service_name" \
    -var ami="$ami" \
    artifacts/terraform

  terraform remote config -disable=true
  rm -f terraform.tfstate*
elif [ -f "$CF_TEMPLATE" ]; then
  echo "Running CloudFormation"
  ansible-playbook -i localhost, \
    "$PLAYBOOK" \
    -e stack_name="$FULL_STACK_NAME" \
    -e owner="$owner" \
    -e service_name="$service_name" \
    -e key_name="$key_name" \
    -e region="$region" \
    -e env="$environment" \
    -e ami="$ami" \
    -e template="$CF_TEMPLATE" \
    -e "@$VARIABLES"

  echo "Injecting into Consul"
  PROJECT_NAME=$service_name NUBIS_ENVIRONMENT=$environment nubis-consul --quiet --region "$region" --stack-name "$FULL_STACK_NAME" get-and-update
fi

## XXX: Needs to move to its own tool
## XXX: limit to nubis/proxy for the time being
if [ -d nubis/proxy ]; then
  CONFIG_INJECT=proxy
  INJECT_PREFIX="nubis-$CONFIG_INJECT-$environment/$environment/config"

  echo "Injecting $CONFIG_INJECT rules into $INJECT_PREFIX"

  # Make sure the container config/ key is present
  consulate  --api-port 443 --api-scheme https --api-host "$CONSUL_ENDPOINT" kv mkdir "$INJECT_PREFIX/" 2>/dev/null

  for r in $(find nubis/$CONFIG_INJECT/ -type f | grep -v \.md | cut -d/ -f3); do
    echo -n "$r "
    consulate  --api-port 443 --api-scheme https --api-host "$CONSUL_ENDPOINT" kv set "$INJECT_PREFIX/$r" "$(cat "nubis/$CONFIG_INJECT/$r")" 2>/dev/null
    echo
  done
fi

# XXX: Needs to move in its own tool
if [ -d nubis/monitoring ]; then
  echo "Injecting Monitoring rules"

  cd nubis/monitoring

  consulate  --api-port 443 --api-scheme https --api-host "$CONSUL_ENDPOINT" kv mkdir "monitoring/$environment/$service_name/" 2>/dev/null

  for rule in *.prom; do
    echo " + $rule"
    consulate  --api-port 443 --api-scheme https --api-host "$CONSUL_ENDPOINT" kv set "monitoring/$environment/$service_name/$rule" "$(cat "$rule")" 2>/dev/null
  done

  cd ../..

fi

